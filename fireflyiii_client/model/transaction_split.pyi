# coding: utf-8

"""
    Firefly III API v1.5.6

    This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00   # noqa: E501

    The version of the OpenAPI document: 1.5.6
    Contact: james@firefly-iii.org
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fireflyiii_client import schemas  # noqa: F401


class TransactionSplit(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "date",
            "amount",
            "destination_id",
            "description",
            "source_id",
            "type",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['TransactionTypeProperty']:
                return TransactionTypeProperty
            date = schemas.DateTimeSchema
            amount = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class source_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'source_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class destination_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'destination_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            user = schemas.StrSchema
            transaction_journal_id = schemas.StrSchema
            
            
            class order(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'order':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class currency_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'currency_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            currency_symbol = schemas.StrSchema
            currency_name = schemas.StrSchema
            currency_decimal_places = schemas.Int32Schema
            
            
            class foreign_currency_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'foreign_currency_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class foreign_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'foreign_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class foreign_currency_symbol(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'foreign_currency_symbol':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class foreign_currency_decimal_places(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'foreign_currency_decimal_places':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class foreign_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'amount'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'foreign_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class source_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'source_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class source_iban(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'source_iban':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def source_type() -> typing.Type['AccountTypeProperty']:
                return AccountTypeProperty
            
            
            class destination_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'destination_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class destination_iban(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'destination_iban':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def destination_type() -> typing.Type['AccountTypeProperty']:
                return AccountTypeProperty
            
            
            class budget_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'budget_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class budget_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'budget_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class category_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class category_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class bill_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bill_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class bill_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bill_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            reconciled = schemas.BoolSchema
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class tags(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class internal_reference(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'internal_reference':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class external_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'external_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class external_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'external_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class original_source(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'original_source':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class recurrence_id(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'recurrence_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class recurrence_total(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'recurrence_total':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class recurrence_count(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'recurrence_count':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class bunq_payment_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bunq_payment_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class import_hash_v2(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'import_hash_v2':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sepa_cc(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sepa_cc':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sepa_ct_op(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sepa_ct_op':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sepa_ct_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sepa_ct_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sepa_db(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sepa_db':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sepa_country(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sepa_country':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sepa_ep(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sepa_ep':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sepa_ci(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sepa_ci':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sepa_batch_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sepa_batch_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class interest_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'interest_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class book_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'book_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class process_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'process_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class due_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'due_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payment_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class invoice_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invoice_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class latitude(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'latitude':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class longitude(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'longitude':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class zoom_level(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'zoom_level':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            has_attachments = schemas.BoolSchema
            __annotations__ = {
                "type": type,
                "date": date,
                "amount": amount,
                "description": description,
                "source_id": source_id,
                "destination_id": destination_id,
                "user": user,
                "transaction_journal_id": transaction_journal_id,
                "order": order,
                "currency_id": currency_id,
                "currency_code": currency_code,
                "currency_symbol": currency_symbol,
                "currency_name": currency_name,
                "currency_decimal_places": currency_decimal_places,
                "foreign_currency_id": foreign_currency_id,
                "foreign_currency_code": foreign_currency_code,
                "foreign_currency_symbol": foreign_currency_symbol,
                "foreign_currency_decimal_places": foreign_currency_decimal_places,
                "foreign_amount": foreign_amount,
                "source_name": source_name,
                "source_iban": source_iban,
                "source_type": source_type,
                "destination_name": destination_name,
                "destination_iban": destination_iban,
                "destination_type": destination_type,
                "budget_id": budget_id,
                "budget_name": budget_name,
                "category_id": category_id,
                "category_name": category_name,
                "bill_id": bill_id,
                "bill_name": bill_name,
                "reconciled": reconciled,
                "notes": notes,
                "tags": tags,
                "internal_reference": internal_reference,
                "external_id": external_id,
                "external_url": external_url,
                "original_source": original_source,
                "recurrence_id": recurrence_id,
                "recurrence_total": recurrence_total,
                "recurrence_count": recurrence_count,
                "bunq_payment_id": bunq_payment_id,
                "import_hash_v2": import_hash_v2,
                "sepa_cc": sepa_cc,
                "sepa_ct_op": sepa_ct_op,
                "sepa_ct_id": sepa_ct_id,
                "sepa_db": sepa_db,
                "sepa_country": sepa_country,
                "sepa_ep": sepa_ep,
                "sepa_ci": sepa_ci,
                "sepa_batch_id": sepa_batch_id,
                "interest_date": interest_date,
                "book_date": book_date,
                "process_date": process_date,
                "due_date": due_date,
                "payment_date": payment_date,
                "invoice_date": invoice_date,
                "latitude": latitude,
                "longitude": longitude,
                "zoom_level": zoom_level,
                "has_attachments": has_attachments,
            }
    
    date: MetaOapg.properties.date
    amount: MetaOapg.properties.amount
    destination_id: MetaOapg.properties.destination_id
    description: MetaOapg.properties.description
    source_id: MetaOapg.properties.source_id
    type: 'TransactionTypeProperty'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'TransactionTypeProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_id"]) -> MetaOapg.properties.source_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_id"]) -> MetaOapg.properties.destination_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_journal_id"]) -> MetaOapg.properties.transaction_journal_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_id"]) -> MetaOapg.properties.currency_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> MetaOapg.properties.currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_symbol"]) -> MetaOapg.properties.currency_symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_name"]) -> MetaOapg.properties.currency_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_decimal_places"]) -> MetaOapg.properties.currency_decimal_places: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreign_currency_id"]) -> MetaOapg.properties.foreign_currency_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreign_currency_code"]) -> MetaOapg.properties.foreign_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreign_currency_symbol"]) -> MetaOapg.properties.foreign_currency_symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreign_currency_decimal_places"]) -> MetaOapg.properties.foreign_currency_decimal_places: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreign_amount"]) -> MetaOapg.properties.foreign_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_name"]) -> MetaOapg.properties.source_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_iban"]) -> MetaOapg.properties.source_iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_type"]) -> 'AccountTypeProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_name"]) -> MetaOapg.properties.destination_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_iban"]) -> MetaOapg.properties.destination_iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_type"]) -> 'AccountTypeProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budget_id"]) -> MetaOapg.properties.budget_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budget_name"]) -> MetaOapg.properties.budget_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_name"]) -> MetaOapg.properties.category_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_id"]) -> MetaOapg.properties.bill_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_name"]) -> MetaOapg.properties.bill_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reconciled"]) -> MetaOapg.properties.reconciled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internal_reference"]) -> MetaOapg.properties.internal_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_url"]) -> MetaOapg.properties.external_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_source"]) -> MetaOapg.properties.original_source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurrence_id"]) -> MetaOapg.properties.recurrence_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurrence_total"]) -> MetaOapg.properties.recurrence_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurrence_count"]) -> MetaOapg.properties.recurrence_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bunq_payment_id"]) -> MetaOapg.properties.bunq_payment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["import_hash_v2"]) -> MetaOapg.properties.import_hash_v2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sepa_cc"]) -> MetaOapg.properties.sepa_cc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sepa_ct_op"]) -> MetaOapg.properties.sepa_ct_op: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sepa_ct_id"]) -> MetaOapg.properties.sepa_ct_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sepa_db"]) -> MetaOapg.properties.sepa_db: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sepa_country"]) -> MetaOapg.properties.sepa_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sepa_ep"]) -> MetaOapg.properties.sepa_ep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sepa_ci"]) -> MetaOapg.properties.sepa_ci: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sepa_batch_id"]) -> MetaOapg.properties.sepa_batch_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interest_date"]) -> MetaOapg.properties.interest_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["book_date"]) -> MetaOapg.properties.book_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["process_date"]) -> MetaOapg.properties.process_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_date"]) -> MetaOapg.properties.payment_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_date"]) -> MetaOapg.properties.invoice_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoom_level"]) -> MetaOapg.properties.zoom_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_attachments"]) -> MetaOapg.properties.has_attachments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "date", "amount", "description", "source_id", "destination_id", "user", "transaction_journal_id", "order", "currency_id", "currency_code", "currency_symbol", "currency_name", "currency_decimal_places", "foreign_currency_id", "foreign_currency_code", "foreign_currency_symbol", "foreign_currency_decimal_places", "foreign_amount", "source_name", "source_iban", "source_type", "destination_name", "destination_iban", "destination_type", "budget_id", "budget_name", "category_id", "category_name", "bill_id", "bill_name", "reconciled", "notes", "tags", "internal_reference", "external_id", "external_url", "original_source", "recurrence_id", "recurrence_total", "recurrence_count", "bunq_payment_id", "import_hash_v2", "sepa_cc", "sepa_ct_op", "sepa_ct_id", "sepa_db", "sepa_country", "sepa_ep", "sepa_ci", "sepa_batch_id", "interest_date", "book_date", "process_date", "due_date", "payment_date", "invoice_date", "latitude", "longitude", "zoom_level", "has_attachments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'TransactionTypeProperty': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_id"]) -> MetaOapg.properties.source_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_id"]) -> MetaOapg.properties.destination_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_journal_id"]) -> typing.Union[MetaOapg.properties.transaction_journal_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_id"]) -> typing.Union[MetaOapg.properties.currency_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> typing.Union[MetaOapg.properties.currency_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_symbol"]) -> typing.Union[MetaOapg.properties.currency_symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_name"]) -> typing.Union[MetaOapg.properties.currency_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_decimal_places"]) -> typing.Union[MetaOapg.properties.currency_decimal_places, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreign_currency_id"]) -> typing.Union[MetaOapg.properties.foreign_currency_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreign_currency_code"]) -> typing.Union[MetaOapg.properties.foreign_currency_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreign_currency_symbol"]) -> typing.Union[MetaOapg.properties.foreign_currency_symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreign_currency_decimal_places"]) -> typing.Union[MetaOapg.properties.foreign_currency_decimal_places, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreign_amount"]) -> typing.Union[MetaOapg.properties.foreign_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_name"]) -> typing.Union[MetaOapg.properties.source_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_iban"]) -> typing.Union[MetaOapg.properties.source_iban, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_type"]) -> typing.Union['AccountTypeProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_name"]) -> typing.Union[MetaOapg.properties.destination_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_iban"]) -> typing.Union[MetaOapg.properties.destination_iban, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_type"]) -> typing.Union['AccountTypeProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budget_id"]) -> typing.Union[MetaOapg.properties.budget_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budget_name"]) -> typing.Union[MetaOapg.properties.budget_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> typing.Union[MetaOapg.properties.category_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_name"]) -> typing.Union[MetaOapg.properties.category_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_id"]) -> typing.Union[MetaOapg.properties.bill_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_name"]) -> typing.Union[MetaOapg.properties.bill_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reconciled"]) -> typing.Union[MetaOapg.properties.reconciled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internal_reference"]) -> typing.Union[MetaOapg.properties.internal_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_id"]) -> typing.Union[MetaOapg.properties.external_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_url"]) -> typing.Union[MetaOapg.properties.external_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_source"]) -> typing.Union[MetaOapg.properties.original_source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurrence_id"]) -> typing.Union[MetaOapg.properties.recurrence_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurrence_total"]) -> typing.Union[MetaOapg.properties.recurrence_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurrence_count"]) -> typing.Union[MetaOapg.properties.recurrence_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bunq_payment_id"]) -> typing.Union[MetaOapg.properties.bunq_payment_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["import_hash_v2"]) -> typing.Union[MetaOapg.properties.import_hash_v2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sepa_cc"]) -> typing.Union[MetaOapg.properties.sepa_cc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sepa_ct_op"]) -> typing.Union[MetaOapg.properties.sepa_ct_op, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sepa_ct_id"]) -> typing.Union[MetaOapg.properties.sepa_ct_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sepa_db"]) -> typing.Union[MetaOapg.properties.sepa_db, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sepa_country"]) -> typing.Union[MetaOapg.properties.sepa_country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sepa_ep"]) -> typing.Union[MetaOapg.properties.sepa_ep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sepa_ci"]) -> typing.Union[MetaOapg.properties.sepa_ci, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sepa_batch_id"]) -> typing.Union[MetaOapg.properties.sepa_batch_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interest_date"]) -> typing.Union[MetaOapg.properties.interest_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["book_date"]) -> typing.Union[MetaOapg.properties.book_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["process_date"]) -> typing.Union[MetaOapg.properties.process_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date"]) -> typing.Union[MetaOapg.properties.due_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_date"]) -> typing.Union[MetaOapg.properties.payment_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_date"]) -> typing.Union[MetaOapg.properties.invoice_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoom_level"]) -> typing.Union[MetaOapg.properties.zoom_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_attachments"]) -> typing.Union[MetaOapg.properties.has_attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "date", "amount", "description", "source_id", "destination_id", "user", "transaction_journal_id", "order", "currency_id", "currency_code", "currency_symbol", "currency_name", "currency_decimal_places", "foreign_currency_id", "foreign_currency_code", "foreign_currency_symbol", "foreign_currency_decimal_places", "foreign_amount", "source_name", "source_iban", "source_type", "destination_name", "destination_iban", "destination_type", "budget_id", "budget_name", "category_id", "category_name", "bill_id", "bill_name", "reconciled", "notes", "tags", "internal_reference", "external_id", "external_url", "original_source", "recurrence_id", "recurrence_total", "recurrence_count", "bunq_payment_id", "import_hash_v2", "sepa_cc", "sepa_ct_op", "sepa_ct_id", "sepa_db", "sepa_country", "sepa_ep", "sepa_ci", "sepa_batch_id", "interest_date", "book_date", "process_date", "due_date", "payment_date", "invoice_date", "latitude", "longitude", "zoom_level", "has_attachments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, datetime, ],
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        destination_id: typing.Union[MetaOapg.properties.destination_id, None, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        source_id: typing.Union[MetaOapg.properties.source_id, None, str, ],
        type: 'TransactionTypeProperty',
        user: typing.Union[MetaOapg.properties.user, str, schemas.Unset] = schemas.unset,
        transaction_journal_id: typing.Union[MetaOapg.properties.transaction_journal_id, str, schemas.Unset] = schemas.unset,
        order: typing.Union[MetaOapg.properties.order, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currency_id: typing.Union[MetaOapg.properties.currency_id, None, str, schemas.Unset] = schemas.unset,
        currency_code: typing.Union[MetaOapg.properties.currency_code, None, str, schemas.Unset] = schemas.unset,
        currency_symbol: typing.Union[MetaOapg.properties.currency_symbol, str, schemas.Unset] = schemas.unset,
        currency_name: typing.Union[MetaOapg.properties.currency_name, str, schemas.Unset] = schemas.unset,
        currency_decimal_places: typing.Union[MetaOapg.properties.currency_decimal_places, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        foreign_currency_id: typing.Union[MetaOapg.properties.foreign_currency_id, None, str, schemas.Unset] = schemas.unset,
        foreign_currency_code: typing.Union[MetaOapg.properties.foreign_currency_code, None, str, schemas.Unset] = schemas.unset,
        foreign_currency_symbol: typing.Union[MetaOapg.properties.foreign_currency_symbol, None, str, schemas.Unset] = schemas.unset,
        foreign_currency_decimal_places: typing.Union[MetaOapg.properties.foreign_currency_decimal_places, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        foreign_amount: typing.Union[MetaOapg.properties.foreign_amount, None, str, schemas.Unset] = schemas.unset,
        source_name: typing.Union[MetaOapg.properties.source_name, None, str, schemas.Unset] = schemas.unset,
        source_iban: typing.Union[MetaOapg.properties.source_iban, None, str, schemas.Unset] = schemas.unset,
        source_type: typing.Union['AccountTypeProperty', schemas.Unset] = schemas.unset,
        destination_name: typing.Union[MetaOapg.properties.destination_name, None, str, schemas.Unset] = schemas.unset,
        destination_iban: typing.Union[MetaOapg.properties.destination_iban, None, str, schemas.Unset] = schemas.unset,
        destination_type: typing.Union['AccountTypeProperty', schemas.Unset] = schemas.unset,
        budget_id: typing.Union[MetaOapg.properties.budget_id, None, str, schemas.Unset] = schemas.unset,
        budget_name: typing.Union[MetaOapg.properties.budget_name, None, str, schemas.Unset] = schemas.unset,
        category_id: typing.Union[MetaOapg.properties.category_id, None, str, schemas.Unset] = schemas.unset,
        category_name: typing.Union[MetaOapg.properties.category_name, None, str, schemas.Unset] = schemas.unset,
        bill_id: typing.Union[MetaOapg.properties.bill_id, None, str, schemas.Unset] = schemas.unset,
        bill_name: typing.Union[MetaOapg.properties.bill_name, None, str, schemas.Unset] = schemas.unset,
        reconciled: typing.Union[MetaOapg.properties.reconciled, bool, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, None, schemas.Unset] = schemas.unset,
        internal_reference: typing.Union[MetaOapg.properties.internal_reference, None, str, schemas.Unset] = schemas.unset,
        external_id: typing.Union[MetaOapg.properties.external_id, None, str, schemas.Unset] = schemas.unset,
        external_url: typing.Union[MetaOapg.properties.external_url, None, str, schemas.Unset] = schemas.unset,
        original_source: typing.Union[MetaOapg.properties.original_source, None, str, schemas.Unset] = schemas.unset,
        recurrence_id: typing.Union[MetaOapg.properties.recurrence_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        recurrence_total: typing.Union[MetaOapg.properties.recurrence_total, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        recurrence_count: typing.Union[MetaOapg.properties.recurrence_count, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bunq_payment_id: typing.Union[MetaOapg.properties.bunq_payment_id, None, str, schemas.Unset] = schemas.unset,
        import_hash_v2: typing.Union[MetaOapg.properties.import_hash_v2, None, str, schemas.Unset] = schemas.unset,
        sepa_cc: typing.Union[MetaOapg.properties.sepa_cc, None, str, schemas.Unset] = schemas.unset,
        sepa_ct_op: typing.Union[MetaOapg.properties.sepa_ct_op, None, str, schemas.Unset] = schemas.unset,
        sepa_ct_id: typing.Union[MetaOapg.properties.sepa_ct_id, None, str, schemas.Unset] = schemas.unset,
        sepa_db: typing.Union[MetaOapg.properties.sepa_db, None, str, schemas.Unset] = schemas.unset,
        sepa_country: typing.Union[MetaOapg.properties.sepa_country, None, str, schemas.Unset] = schemas.unset,
        sepa_ep: typing.Union[MetaOapg.properties.sepa_ep, None, str, schemas.Unset] = schemas.unset,
        sepa_ci: typing.Union[MetaOapg.properties.sepa_ci, None, str, schemas.Unset] = schemas.unset,
        sepa_batch_id: typing.Union[MetaOapg.properties.sepa_batch_id, None, str, schemas.Unset] = schemas.unset,
        interest_date: typing.Union[MetaOapg.properties.interest_date, None, str, datetime, schemas.Unset] = schemas.unset,
        book_date: typing.Union[MetaOapg.properties.book_date, None, str, datetime, schemas.Unset] = schemas.unset,
        process_date: typing.Union[MetaOapg.properties.process_date, None, str, datetime, schemas.Unset] = schemas.unset,
        due_date: typing.Union[MetaOapg.properties.due_date, None, str, datetime, schemas.Unset] = schemas.unset,
        payment_date: typing.Union[MetaOapg.properties.payment_date, None, str, datetime, schemas.Unset] = schemas.unset,
        invoice_date: typing.Union[MetaOapg.properties.invoice_date, None, str, datetime, schemas.Unset] = schemas.unset,
        latitude: typing.Union[MetaOapg.properties.latitude, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        longitude: typing.Union[MetaOapg.properties.longitude, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        zoom_level: typing.Union[MetaOapg.properties.zoom_level, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        has_attachments: typing.Union[MetaOapg.properties.has_attachments, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionSplit':
        return super().__new__(
            cls,
            *_args,
            date=date,
            amount=amount,
            destination_id=destination_id,
            description=description,
            source_id=source_id,
            type=type,
            user=user,
            transaction_journal_id=transaction_journal_id,
            order=order,
            currency_id=currency_id,
            currency_code=currency_code,
            currency_symbol=currency_symbol,
            currency_name=currency_name,
            currency_decimal_places=currency_decimal_places,
            foreign_currency_id=foreign_currency_id,
            foreign_currency_code=foreign_currency_code,
            foreign_currency_symbol=foreign_currency_symbol,
            foreign_currency_decimal_places=foreign_currency_decimal_places,
            foreign_amount=foreign_amount,
            source_name=source_name,
            source_iban=source_iban,
            source_type=source_type,
            destination_name=destination_name,
            destination_iban=destination_iban,
            destination_type=destination_type,
            budget_id=budget_id,
            budget_name=budget_name,
            category_id=category_id,
            category_name=category_name,
            bill_id=bill_id,
            bill_name=bill_name,
            reconciled=reconciled,
            notes=notes,
            tags=tags,
            internal_reference=internal_reference,
            external_id=external_id,
            external_url=external_url,
            original_source=original_source,
            recurrence_id=recurrence_id,
            recurrence_total=recurrence_total,
            recurrence_count=recurrence_count,
            bunq_payment_id=bunq_payment_id,
            import_hash_v2=import_hash_v2,
            sepa_cc=sepa_cc,
            sepa_ct_op=sepa_ct_op,
            sepa_ct_id=sepa_ct_id,
            sepa_db=sepa_db,
            sepa_country=sepa_country,
            sepa_ep=sepa_ep,
            sepa_ci=sepa_ci,
            sepa_batch_id=sepa_batch_id,
            interest_date=interest_date,
            book_date=book_date,
            process_date=process_date,
            due_date=due_date,
            payment_date=payment_date,
            invoice_date=invoice_date,
            latitude=latitude,
            longitude=longitude,
            zoom_level=zoom_level,
            has_attachments=has_attachments,
            _configuration=_configuration,
            **kwargs,
        )

from fireflyiii_client.model.account_type_property import AccountTypeProperty
from fireflyiii_client.model.transaction_type_property import TransactionTypeProperty
